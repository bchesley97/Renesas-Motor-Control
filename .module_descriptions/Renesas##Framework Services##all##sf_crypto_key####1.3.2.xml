<?xml version="1.0" ?>
<synergyModuleDescription>
    <config id="config.framework.sf_crypto_key" path="ssp_cfg/framework/sf_crypto_key_cfg.h" version="0">
        <property default="config.framework.sf_crypto_key.param_checking_enable.bsp" display="Parameter Checking" id="config.framework.sf_crypto_key.param_checking_enable">
            <option display="Default (BSP)" id="config.framework.sf_crypto_key.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled"       id="config.framework.sf_crypto_key.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled"      id="config.framework.sf_crypto_key.param_checking_enable.disabled" value="(0)"/>
        </property>
        <content>
            #define SF_CRYPTO_KEY_CFG_PARAM_CHECKING_ENABLE ${config.framework.sf_crypto_key.param_checking_enable}
        </content>
    </config>
    <module config="config.framework.sf_crypto_key" display="Framework|Crypto|${module.framework.sf_crypto_key.name} Crypto Key Framework on sf_crypto_key" id="module.framework.sf_crypto_key" version="1">
        <constraint display="Module instances must have unique names">
            "${interface.framework.sf_crypto_key.${module.framework.sf_crypto_key.name}}" === "1"
        </constraint>
        <constraint display="If AES is used, Default Byte Pool size must be greater than 270Bytes">
            "${module.framework.sf_crypto_key.requires.sf_crypto::module.framework.sf_crypto.memory_pool_size}" > "270"
        </constraint>
        <requires interface="_rtos" />
        <requires id="module.framework.sf_crypto_key.requires.sf_crypto" interface="interface.framework.sf_crypto" display="Add Crypto Common Framework" />
        <provides interface="interface.framework.sf_crypto_key" />
        <provides interface="interface.framework.sf_crypto_key.${module.framework.sf_crypto_key.name}" />

        <property default="g_sf_crypto_key${_instance}" display="Name" id="module.framework.sf_crypto_key.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_crypto_key.name}")</constraint>
        </property>
        <property id="module.framework.sf_crypto_key.key_type" display="Key type" default="module.framework.sf_crypto_key.key_type.rsa_plain_text">
            <option display="RSA Plain text" id="module.framework.sf_crypto_key.key_type.rsa_plain_text" value="SF_CRYPTO_KEY_TYPE_RSA_PLAIN_TEXT"/>
            <option display="RSA CRT Plain text" id="module.framework.sf_crypto_key.key_type.rsa_crt_plain_text" value="SF_CRYPTO_KEY_TYPE_RSA_CRT_PLAIN_TEXT"/>
            <option display="RSA Wrapped" id="module.framework.sf_crypto_key.key_type.rsa_wrapped" value="SF_CRYPTO_KEY_TYPE_RSA_WRAPPED"/>
			<option display="Wrapped AES" id="module.framework.sf_crypto_key.key_type.wrapped_aes" value="SF_CRYPTO_KEY_TYPE_AES_WRAPPED"/>
        </property>
        <property id="module.framework.sf_crypto_key.key_size" display="Key size" default="module.framework.sf_crypto_key.key_size.rsa_2048b">
            <option display="RSA 1024bytes" id="module.framework.sf_crypto_key.key_size.rsa_1024b" value="SF_CRYPTO_KEY_SIZE_RSA_1024"/>
            <option display="RSA 2048bytes" id="module.framework.sf_crypto_key.key_size.rsa_2048b" value="SF_CRYPTO_KEY_SIZE_RSA_2048"/>
            <option display="AES 128bits" id="module.framework.sf_crypto_key.key_size.aes_128b" value="SF_CRYPTO_KEY_SIZE_AES_128"/>
            <option display="AES 128bits XTS" id="module.framework.sf_crypto_key.key_size.aes_128b_xts" value="SF_CRYPTO_KEY_SIZE_AES_XTS_128"/>
            <option display="AES 192bits" id="module.framework.sf_crypto_key.key_size.aes_192b" value="SF_CRYPTO_KEY_SIZE_AES_192"/>
            <option display="AES 256bits" id="module.framework.sf_crypto_key.key_size.aes_256b" value="SF_CRYPTO_KEY_SIZE_AES_256"/>
            <option display="AES 256bits XTS" id="module.framework.sf_crypto_key.key_size.aes_256b_xts" value="SF_CRYPTO_KEY_SIZE_AES_XTS_256"/>
        </property>
        <property default="sf_crypto_key_init${_instance}" display="Name of generated initialization function" id="module.framework.sf_crypto_key.init_function">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_crypto_key.init_function}")</constraint>
        </property>
        <property default="module.framework.sf_crypto_key.init.enable" display="Auto Initialization" id="module.framework.sf_crypto_key.init">
            <option display="Enable"  id="module.framework.sf_crypto_key.init.enable"  value="1"/>
            <option display="Disable" id="module.framework.sf_crypto_key.init.disable" value="0"/>
        </property>

        <header>
            extern sf_crypto_key_instance_t ${module.framework.sf_crypto_key.name};
            void ${module.framework.sf_crypto_key.name}_err_callback(void * p_instance, void * p_data);
            void ${module.framework.sf_crypto_key.init_function}(void);
        </header>
        <includes>
            #include &quot;sf_crypto_key.h&quot;
        </includes>
        <declarations>
            #if defined(__ICCARM__)
            #define ${module.framework.sf_crypto_key.name}_err_callback_WEAK_ATTRIBUTE
            #pragma weak ${module.framework.sf_crypto_key.name}_err_callback  = ${module.framework.sf_crypto_key.name}_err_callback_internal
            #elif defined(__GNUC__)
            #define ${module.framework.sf_crypto_key.name}_err_callback_WEAK_ATTRIBUTE __attribute__ ((weak, alias("${module.framework.sf_crypto_key.name}_err_callback_internal")))
            #endif
            void ${module.framework.sf_crypto_key.name}_err_callback(void * p_instance, void * p_data) ${module.framework.sf_crypto_key.name}_err_callback_WEAK_ATTRIBUTE;

            /* Control block for ${module.framework.sf_crypto_key.name}. */
            sf_crypto_key_instance_ctrl_t ${module.framework.sf_crypto_key.name}_ctrl;

            /* Configuration structure for ${module.framework.sf_crypto_key.name}. */
            sf_crypto_key_cfg_t ${module.framework.sf_crypto_key.name}_cfg =
            {
                .key_type                  = ${module.framework.sf_crypto_key.key_type},
                .key_size                  = ${module.framework.sf_crypto_key.key_size},
                .domain_params             = {NULL, 0},
                .p_lower_lvl_crypto_common = (sf_crypto_instance_t *)&amp;${module.framework.sf_crypto_key.requires.sf_crypto::module.framework.sf_crypto.name}, 
                .p_extend                  = NULL, 

            };
            /* Instance structure for ${module.framework.sf_crypto_key.name}. */
            sf_crypto_key_instance_t ${module.framework.sf_crypto_key.name} = 
            {
                .p_ctrl = &amp;${module.framework.sf_crypto_key.name}_ctrl,
                .p_cfg  = &amp;${module.framework.sf_crypto_key.name}_cfg,
                .p_api  = &amp;g_sf_crypto_key_api
            };

            /*******************************************************************************************************************//**
            * @brief      This is a weak example initialization error function.  It should be overridden by defining a user  function 
            *             with the prototype below.
            *             - void ${module.framework.sf_crypto_key.name}_err_callback(void * p_instance, void * p_data)
            *
            * @param[in]  p_instance arguments used to identify which instance caused the error and p_data Callback arguments used to identify what error caused the callback.
            **********************************************************************************************************************/
            void ${module.framework.sf_crypto_key.name}_err_callback_internal(void * p_instance, void * p_data);
            void ${module.framework.sf_crypto_key.name}_err_callback_internal(void * p_instance, void * p_data)
            {
                /** Suppress compiler warning for not using parameters. */
                SSP_PARAMETER_NOT_USED(p_instance);
                SSP_PARAMETER_NOT_USED(p_data);

                /** An error has occurred. Please check function arguments for more information. */
                BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
            }
			
            /*******************************************************************************************************************//**
            * @brief     Initialization function that the user can choose to have called automatically during thread entry.
            *            The user can call this function at a later time if desired using the prototype below.
            *            - void ${module.framework.sf_crypto_key.init_function}(void)
            **********************************************************************************************************************/
            void ${module.framework.sf_crypto_key.init_function}(void)
            {
                ssp_err_t ssp_err_${module.framework.sf_crypto_key.name};
                ssp_err_${module.framework.sf_crypto_key.name} = ${module.framework.sf_crypto_key.name}.p_api->open(${module.framework.sf_crypto_key.name}.p_ctrl, ${module.framework.sf_crypto_key.name}.p_cfg);
                if (SSP_SUCCESS != ssp_err_${module.framework.sf_crypto_key.name})
                {
                    ${module.framework.sf_crypto_key.name}_err_callback((void *)&amp;${module.framework.sf_crypto_key.name},&amp;ssp_err_${module.framework.sf_crypto_key.name});
                }
            }
        </declarations>
        <init>
            /** Call initialization function for ${module.framework.sf_crypto_key.name}. */
            #if (${module.framework.sf_crypto_key.init})
            /** Call initialization function if user has selected to do so. */
            ${module.framework.sf_crypto_key.init_function}();
            #endif
        </init>
    </module>
</synergyModuleDescription>
